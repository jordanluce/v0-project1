"use client"

import { useState, useRef } from "react"
import "./ShareSystemsModal.css"

const ShareSystemsModal = ({ onClose, savedSystems, players, teamName, activeTeamId, courtRef }) => {
  const [coachNote, setCoachNote] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState("")
  const pdfContainerRef = useRef(null)

  // Function to format date in a clean way
  const formatDate = (date) => {
    const d = new Date(date)
    return `${d.toLocaleDateString()} ${d.toLocaleTimeString(undefined, {
      hour: "2-digit",
      minute: "2-digit",
    })}`
  }

  // Improved PDF generation function with better mobile support
  const generatePDF = async () => {
    setIsGenerating(true)
    setError("")

    try {
      // Create a hidden container to hold our content for conversion
      const contentContainer = document.createElement("div")
      contentContainer.className = "pdf-container"
      contentContainer.style.position = "absolute"
      contentContainer.style.left = "-9999px"
      contentContainer.style.top = "-9999px"
      contentContainer.style.width = "800px" // Fixed width for consistent rendering
      contentContainer.style.backgroundColor = "white"
      contentContainer.style.padding = "20px"
      contentContainer.style.fontFamily = "Arial, sans-serif"
      document.body.appendChild(contentContainer)

      // Generate the content HTML
      contentContainer.innerHTML = `
      <div class="pdf-header">
        <h1>Court360 - Wheelchair Basketball Team Manager</h1>
        <h2>${teamName || "Team"} Systems Export</h2>
        <p>Date: ${new Date().toLocaleDateString()}</p>
        <p>Total Players: ${players.filter((p) => p.teamId === activeTeamId).length}</p>
        <p>Total Saved Systems: ${savedSystems.length}</p>
      </div>
      ${coachNote ? `<div class="pdf-note"><h3>Coach's Note:</h3><p>${coachNote}</p></div>` : ""}
      
      <div class="pdf-players">
        <h3>Team Players</h3>
        <table class="pdf-players-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Classification</th>
              <th>Category</th>
              <th>Foreign</th>
              <th>Able-Bodied</th>
            </tr>
          </thead>
          <tbody>
            ${players
              .filter((p) => p.teamId === activeTeamId)
              .map(
                (player) => `
              <tr>
                <td>${player.name}</td>
                <td>${player.classification}</td>
                <td>${player.category || "Senior"}</td>
                <td>${player.isForeign ? "Yes" : "No"}</td>
                <td>${player.isAbleBody ? "Yes" : "No"}</td>
              </tr>
            `,
              )
              .join("")}
          </tbody>
        </table>
      </div>
      
      <div class="pdf-systems">
        <h3>Saved Systems</h3>
        <div class="pdf-systems-grid">
          ${savedSystems
            .map(
              (system) => `
            <div class="pdf-system-card">
              <div class="pdf-system-header">
                <h4>${system.name}</h4>
                <span>${formatDate(system.createdAt)}</span>
              </div>
              <div class="pdf-system-visual" id="system-visual-${system.id}">
                <div class="pdf-system-loading">
                  <p>System visualization loading...</p>
                </div>
              </div>
            </div>
          `,
            )
            .join("")}
        </div>
      </div>
      
      <div class="pdf-footer">
        <p>Generated by Court360 on ${new Date().toLocaleDateString()}</p>
      </div>
    `

      // Add CSS styles directly to the container
      const styleElement = document.createElement("style")
      styleElement.textContent = `
      .pdf-container {
        font-family: Arial, sans-serif;
        color: #1e1f26;
      }
      
      .pdf-header {
        text-align: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #29a19c;
      }
      
      .pdf-header h1 {
        color: #1e1f26;
        margin: 0 0 5px;
        font-size: 24px;
      }
      
      .pdf-header h2 {
        color: #29a19c;
        margin: 0 0 10px;
        font-size: 20px;
      }
      
      .pdf-note {
        background-color: #f5f5f5;
        padding: 10px 15px;
        border-left: 4px solid #e27d60;
        margin-bottom: 20px;
      }
      
      .pdf-players {
        margin-bottom: 20px;
      }
      
      .pdf-players-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
      }
      
      .pdf-players-table th, .pdf-players-table td {
        border: 1px solid #ddd;
        padding: 8px 12px;
        text-align: left;
      }
      
      .pdf-players-table th {
        background-color: #29a19c;
        color: white;
      }
      
      .pdf-players-table tr:nth-child(even) {
        background-color: #f2f2f2;
      }
      
      .pdf-systems h3, .pdf-players h3 {
        color: #1e1f26;
        border-bottom: 1px solid #ddd;
        padding-bottom: 5px;
      }
      
      .pdf-systems-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 15px;
        margin-top: 15px;
      }
      
      .pdf-system-card {
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
      }
      
      .pdf-system-header {
        background-color: #1e1f26;
        color: white;
        padding: 10px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .pdf-system-header h4 {
        margin: 0;
        color: white;
      }
      
      .pdf-system-visual {
        padding: 10px;
        background-color: #f9f9f9;
        min-height: 200px;
        position: relative;
        aspect-ratio: 1.78 / 1;
        overflow: hidden;
      }
      
      .basketball-court {
        width: 100%;
        height: auto;
        background-color: #f8f8f8;
        border-radius: 3px;
      }
      
      .pdf-drawings-layer,
      .pdf-players-layer,
      .pdf-opponents-layer,
      .pdf-basketballs-layer {
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        pointer-events: none !important;
      }
      
      .pdf-footer {
        margin-top: 20px;
        text-align: center;
        font-size: 12px;
        color: #666;
      }
    `
      contentContainer.appendChild(styleElement)

      // Add system visualizations - improved for mobile compatibility
      for (const system of savedSystems) {
        try {
          // Get the visual container for this system
          const visualContainer = document.getElementById(`system-visual-${system.id}`)
          if (!visualContainer || !courtRef.current) continue

          // Clear the container
          visualContainer.innerHTML = ""

          // Create a wrapper div with relative positioning to contain both court and drawings
          const wrapper = document.createElement("div")
          wrapper.style.position = "relative"
          wrapper.style.width = "100%"
          wrapper.style.height = "auto"
          visualContainer.appendChild(wrapper)

          // Clone the court SVG - ensure we get the complete SVG with all attributes
          const courtSvg = courtRef.current.querySelector(".basketball-court").cloneNode(true)
          courtSvg.style.width = "100%"
          courtSvg.style.height = "auto"
          courtSvg.style.display = "block"
          wrapper.appendChild(courtSvg)

          // Get the original court dimensions for scaling
          const originalCourtRect = courtRef.current.getBoundingClientRect()
          const originalWidth = originalCourtRect.width
          const originalHeight = originalCourtRect.height

          // Create a new SVG element for drawings that will overlay the court
          if (system.drawings && system.drawings.length > 0) {
            // Create an SVG container with the same aspect ratio as the court
            const drawingsSvg = document.createElementNS("http://www.w3.org/2000/svg", "svg")
            drawingsSvg.setAttribute("class", "pdf-drawings-layer")
            drawingsSvg.setAttribute("width", "100%")
            drawingsSvg.setAttribute("height", "100%")
            drawingsSvg.setAttribute("viewBox", `0 0 ${originalWidth} ${originalHeight}`)
            drawingsSvg.setAttribute("preserveAspectRatio", "xMidYMid meet")
            drawingsSvg.style.position = "absolute"
            drawingsSvg.style.top = "0"
            drawingsSvg.style.left = "0"
            drawingsSvg.style.pointerEvents = "none"
            drawingsSvg.style.zIndex = "10" // Ensure drawings are visible

            // Add drawings to the SVG - improved for mobile compatibility
            system.drawings.forEach((drawing) => {
              if (!drawing || !drawing.points || !Array.isArray(drawing.points) || drawing.points.length === 0) {
                return // Skip invalid drawings
              }

              // Create polyline for the drawing
              const polyline = document.createElementNS("http://www.w3.org/2000/svg", "polyline")

              // Ensure points are valid and convert to string
              const pointsString = drawing.points
                .filter((p) => p && typeof p.x === "number" && typeof p.y === "number")
                .map((p) => `${p.x},${p.y}`)
                .join(" ")

              if (!pointsString) return // Skip if no valid points

              polyline.setAttribute("points", pointsString)
              polyline.setAttribute("fill", "none")
              polyline.setAttribute("stroke", drawing.color || "#ff0000")
              polyline.setAttribute("stroke-width", (drawing.width || 2).toString())
              polyline.setAttribute("stroke-linecap", "round")
              polyline.setAttribute("stroke-linejoin", "round")
              drawingsSvg.appendChild(polyline)

              // Add arrowhead if needed
              if (drawing.type === "arrow" && drawing.points.length >= 2) {
                // Calculate arrowhead points
                const start = drawing.points[0]
                const end = drawing.points[1]
                const angle = Math.atan2(end.y - start.y, end.x - start.x)
                const arrowLength = 15
                const arrowAngle = Math.PI / 6

                const point1 = {
                  x: end.x - arrowLength * Math.cos(angle - arrowAngle),
                  y: end.y - arrowLength * Math.sin(angle - arrowAngle),
                }

                const point2 = {
                  x: end.x - arrowLength * Math.cos(angle + arrowAngle),
                  y: end.y - arrowLength * Math.sin(angle + arrowAngle),
                }

                // Create arrowhead polyline
                const arrowhead = document.createElementNS("http://www.w3.org/2000/svg", "polyline")
                arrowhead.setAttribute("points", `${point1.x},${point1.y} ${end.x},${end.y} ${point2.x},${point2.y}`)
                arrowhead.setAttribute("fill", "none")
                arrowhead.setAttribute("stroke", drawing.color || "#ff0000")
                arrowhead.setAttribute("stroke-width", (drawing.width || 2).toString())
                arrowhead.setAttribute("stroke-linecap", "round")
                arrowhead.setAttribute("stroke-linejoin", "round")
                drawingsSvg.appendChild(arrowhead)

                // Add arrow number if available
                if (drawing.arrowNumber) {
                  const text = document.createElementNS("http://www.w3.org/2000/svg", "text")
                  text.setAttribute("x", (start.x - 8).toString())
                  text.setAttribute("y", (start.y - 8).toString())
                  text.setAttribute("fill", "#ffffff")
                  text.setAttribute("stroke", "#000000")
                  text.setAttribute("stroke-width", "0.5")
                  text.setAttribute("font-size", "12px")
                  text.setAttribute("font-weight", "bold")
                  text.setAttribute("text-anchor", "middle")
                  text.setAttribute("dominant-baseline", "middle")
                  text.textContent = drawing.arrowNumber.toString()
                  drawingsSvg.appendChild(text)
                }
              }
            })

            wrapper.appendChild(drawingsSvg)
          }

          // Add player markers if available
          if (system.playerPositions && Object.keys(system.playerPositions).length > 0) {
            // Create an SVG layer for player markers
            const playersLayer = document.createElementNS("http://www.w3.org/2000/svg", "svg")
            playersLayer.setAttribute("class", "pdf-players-layer")
            playersLayer.setAttribute("width", "100%")
            playersLayer.setAttribute("height", "100%")
            playersLayer.setAttribute("viewBox", `0 0 ${originalWidth} ${originalHeight}`)
            playersLayer.setAttribute("preserveAspectRatio", "xMidYMid meet")
            playersLayer.style.position = "absolute"
            playersLayer.style.top = "0"
            playersLayer.style.left = "0"
            playersLayer.style.pointerEvents = "none"
            playersLayer.style.zIndex = "20" // Ensure players are above drawings

            // Add each player marker as SVG elements
            Object.entries(system.playerPositions).forEach(([playerId, position]) => {
              if (!position || typeof position.x !== "number" || typeof position.y !== "number") {
                return // Skip invalid positions
              }

              const player = players.find((p) => p.id === playerId)
              if (player) {
                // Create a group for the player marker
                const markerGroup = document.createElementNS("http://www.w3.org/2000/svg", "g")
                markerGroup.setAttribute("transform", `translate(${position.x}, ${position.y})`)

                // Create the player circle
                const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle")
                circle.setAttribute("r", "17.5") // 35px diameter
                circle.setAttribute("fill", "#4caf50")
                circle.setAttribute("stroke", "#3d8b40")
                circle.setAttribute("stroke-width", "1")
                markerGroup.appendChild(circle)

                // Add player initials - use a simpler approach for mobile compatibility
                const initials = document.createElementNS("http://www.w3.org/2000/svg", "text")
                initials.setAttribute("x", "0")
                initials.setAttribute("y", "5") // Center in the circle
                initials.setAttribute("text-anchor", "middle")
                initials.setAttribute("dominant-baseline", "middle")
                initials.setAttribute("font-weight", "bold")
                initials.setAttribute("font-size", "12px")
                initials.setAttribute("fill", "white")
                initials.setAttribute("stroke", "none")

                // Ensure we have valid text content
                const initialsText = player.name ? player.name.substring(0, 2).toUpperCase() : "??"
                initials.textContent = initialsText

                // Add classification as a separate text element below
                const classification = document.createElementNS("http://www.w3.org/2000/svg", "text")
                classification.setAttribute("x", "0")
                classification.setAttribute("y", "-10") // Position above the center
                classification.setAttribute("text-anchor", "middle")
                classification.setAttribute("font-size", "10px")
                classification.setAttribute("fill", "white")
                classification.setAttribute("stroke", "none")
                classification.textContent = player.classification || ""

                markerGroup.appendChild(classification)
                markerGroup.appendChild(initials)

                playersLayer.appendChild(markerGroup)
              }
            })

            wrapper.appendChild(playersLayer)
          }

          // Add opponent markers if available - improved for mobile compatibility
          if (system.opponents && system.opponents.length > 0 && system.opponentPositions) {
            // Create an SVG layer for opponent markers
            const opponentsLayer = document.createElementNS("http://www.w3.org/2000/svg", "svg")
            opponentsLayer.setAttribute("class", "pdf-opponents-layer")
            opponentsLayer.setAttribute("width", "100%")
            opponentsLayer.setAttribute("height", "100%")
            opponentsLayer.setAttribute("viewBox", `0 0 ${originalWidth} ${originalHeight}`)
            opponentsLayer.setAttribute("preserveAspectRatio", "xMidYMid meet")
            opponentsLayer.style.position = "absolute"
            opponentsLayer.style.top = "0"
            opponentsLayer.style.left = "0"
            opponentsLayer.style.pointerEvents = "none"
            opponentsLayer.style.zIndex = "20" // Ensure opponents are above drawings

            // Add each opponent marker
            system.opponents.forEach((opponent) => {
              if (!opponent || !opponent.id) return // Skip invalid opponents

              const position = system.opponentPositions[opponent.id]
              if (position && typeof position.x === "number" && typeof position.y === "number") {
                // Create a group for the opponent marker
                const markerGroup = document.createElementNS("http://www.w3.org/2000/svg", "g")
                markerGroup.setAttribute("transform", `translate(${position.x}, ${position.y})`)

                // Create the opponent circle
                const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle")
                circle.setAttribute("r", "15") // 30px diameter
                circle.setAttribute("fill", "#ff0000")
                circle.setAttribute("stroke", "#cc0000")
                circle.setAttribute("stroke-width", "1")
                markerGroup.appendChild(circle)

                // Add X mark - simplified for mobile compatibility
                const xMark = document.createElementNS("http://www.w3.org/2000/svg", "text")
                xMark.setAttribute("x", "0")
                xMark.setAttribute("y", "6")
                xMark.setAttribute("text-anchor", "middle")
                xMark.setAttribute("dominant-baseline", "middle")
                xMark.setAttribute("font-size", "16px")
                xMark.setAttribute("font-weight", "bold")
                xMark.setAttribute("fill", "white")
                xMark.setAttribute("stroke", "none")
                xMark.textContent = "X" // Use standard ASCII character instead of × for better compatibility
                markerGroup.appendChild(xMark)

                opponentsLayer.appendChild(markerGroup)
              }
            })

            wrapper.appendChild(opponentsLayer)
          }

          // Add basketball markers if available
          if (system.basketballs && system.basketballs.length > 0) {
            // Create an SVG layer for basketball markers
            const basketballsLayer = document.createElementNS("http://www.w3.org/2000/svg", "svg")
            basketballsLayer.setAttribute("class", "pdf-basketballs-layer")
            basketballsLayer.setAttribute("width", "100%")
            basketballsLayer.setAttribute("height", "100%")
            basketballsLayer.setAttribute("viewBox", `0 0 ${originalWidth} ${originalHeight}`)
            basketballsLayer.setAttribute("preserveAspectRatio", "xMidYMid meet")
            basketballsLayer.style.position = "absolute"
            basketballsLayer.style.top = "0"
            basketballsLayer.style.left = "0"
            basketballsLayer.style.pointerEvents = "none"
            basketballsLayer.style.zIndex = "30" // Ensure basketballs are on top

            // Add each basketball
            system.basketballs.forEach((ball) => {
              if (
                !ball ||
                !ball.position ||
                typeof ball.position.x !== "number" ||
                typeof ball.position.y !== "number"
              ) {
                return // Skip invalid basketballs
              }

              // Create a group for the basketball
              const ballGroup = document.createElementNS("http://www.w3.org/2000/svg", "g")
              ballGroup.setAttribute("transform", `translate(${ball.position.x}, ${ball.position.y})`)

              // Create the basketball circle with gradient
              const ballCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle")
              ballCircle.setAttribute("r", "12") // 24px diameter
              ballCircle.setAttribute("fill", "#b35c00")
              ballCircle.setAttribute("stroke", "#8a4500")
              ballCircle.setAttribute("stroke-width", "1")
              ballGroup.appendChild(ballCircle)

              // Add horizontal line
              const horizontalLine = document.createElementNS("http://www.w3.org/2000/svg", "line")
              horizontalLine.setAttribute("x1", "-9.6")
              horizontalLine.setAttribute("y1", "0")
              horizontalLine.setAttribute("x2", "9.6")
              horizontalLine.setAttribute("y2", "0")
              horizontalLine.setAttribute("stroke", "#8a4500")
              horizontalLine.setAttribute("stroke-width", "2")
              ballGroup.appendChild(horizontalLine)

              // Add vertical line
              const verticalLine = document.createElementNS("http://www.w3.org/2000/svg", "line")
              verticalLine.setAttribute("x1", "0")
              verticalLine.setAttribute("y1", "-9.6")
              verticalLine.setAttribute("x2", "0")
              verticalLine.setAttribute("y2", "9.6")
              verticalLine.setAttribute("stroke", "#8a4500")
              verticalLine.setAttribute("stroke-width", "2")
              ballGroup.appendChild(verticalLine)

              basketballsLayer.appendChild(ballGroup)
            })

            wrapper.appendChild(basketballsLayer)
          }
        } catch (e) {
          console.error("Error rendering system visualization:", e)
          const visualContainer = document.getElementById(`system-visual-${system.id}`)
          if (visualContainer) {
            visualContainer.innerHTML = `
            <div class="pdf-system-error">
              <p>Error loading system visualization. Error details: ${e.message}</p>
            </div>
          `
          }
        }
      }

      // Wait for all content to render - longer timeout for mobile
      await new Promise((resolve) => setTimeout(resolve, 1000))

      // Create a complete HTML document with all the content
      const htmlContent = `
    <!DOCTYPE html>
    <html>
      <head>
        <title>${teamName || "Team"} Systems Export</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8">
        <style>
          body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            color: #1e1f26;
          }
          
          ${styleElement.textContent}
        </style>
      </head>
      <body>
        ${contentContainer.innerHTML}
      </body>
    </html>
    `

      // Create a Blob with the HTML content
      const blob = new Blob([htmlContent], { type: "text/html;charset=utf-8" })

      // Create a URL for the Blob
      const url = URL.createObjectURL(blob)

      // Create a download link
      const downloadLink = document.createElement("a")
      downloadLink.href = url
      downloadLink.download = `${teamName || "Team"}_Systems_${new Date().toISOString().split("T")[0]}.html`

      // Trigger the download
      document.body.appendChild(downloadLink)
      downloadLink.click()
      document.body.removeChild(downloadLink)

      // Clean up
      URL.revokeObjectURL(url)
      document.body.removeChild(contentContainer)
      setIsGenerating(false)

      // Show success notification
      setNotification({
        show: true,
        message: "Systems exported successfully!",
      })
      setTimeout(() => setNotification({ show: false, message: "" }), 3000)
    } catch (err) {
      console.error("PDF generation error:", err)
      setError(`Error generating export: ${err.message}`)
      setIsGenerating(false)
    }
  }

  // Add this notification state if it doesn't exist
  const [notification, setNotification] = useState({ show: false, message: "" })

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content share-systems-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>Share Systems</h2>
          <button className="close-button" onClick={onClose}>
            ×
          </button>
        </div>

        <div className="share-systems-content">
          <div className="share-systems-info">
            <p>Generate a PDF with all your saved systems, player information, and team details.</p>
            <p>The PDF will include:</p>
            <ul>
              <li>Team information</li>
              <li>Player roster with classifications</li>
              <li>All saved static systems with visualizations</li>
              <li>Optional coach's note</li>
            </ul>
          </div>

          <div className="form-group">
            <label htmlFor="coachNote">Add a Note (Optional):</label>
            <textarea
              id="coachNote"
              rows={3}
              placeholder="Add any notes or instructions..."
              value={coachNote}
              onChange={(e) => setCoachNote(e.target.value)}
            />
          </div>

          {error && <div className="share-error-message">{error}</div>}

          <div className="share-systems-stats">
            <div className="share-stat">
              <span className="share-stat-label">Team:</span>
              <span className="share-stat-value">{teamName || "Not selected"}</span>
            </div>
            <div className="share-stat">
              <span className="share-stat-label">Players:</span>
              <span className="share-stat-value">{players.filter((p) => p.teamId === activeTeamId).length}</span>
            </div>
            <div className="share-stat">
              <span className="share-stat-label">Saved Systems:</span>
              <span className="share-stat-value">{savedSystems.length}</span>
            </div>
          </div>
        </div>

        <div className="modal-footer">
          <button className="action-button secondary" onClick={onClose}>
            Cancel
          </button>
          <button className="action-button" onClick={generatePDF} disabled={isGenerating || savedSystems.length === 0}>
            {isGenerating ? "Generating PDF..." : "Generate PDF"}
          </button>
        </div>
      </div>
    </div>
  )
}

export default ShareSystemsModal


